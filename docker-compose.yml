version: "3"

services:
  hub-db:
    image: mariadb
    container_name: jupyterhub-db
    restart: always
    env_file:
      - secrets/mysql.env
    volumes:
      - "jupyterhub-db-data:${DB_VOLUME_CONTAINER}"

  hub:
    depends_on:
      - hub-db
    restart: always
    image: ${JUPYTERHUB_IMAGE}:dev
    container_name: jupyterhub
    tty: True
    command: "${JUPYTERHUB_CMD}"
    ports:
      - "8001:8000"
    volumes:
      # Bind Docker socket on the host so we can connect to the daemon from
      # within the container
      - "/var/run/docker.sock:/var/run/docker.sock:rw"
      - "jupyterhub-data:${DATA_VOLUME_CONTAINER}"
      - "${JUPYTERHUB_EXTVOL}:/ext"
    environment:
      # Pass debug flag through
      DEBUG: ${DEBUG}
      # Point to dev Portal build by default
      CHAMELEON_SHARING_PORTAL_UPLOAD_URL: ${CHAMELEON_SHARING_PORTAL_UPLOAD_URL}
      CHAMELEON_SHARING_PORTAL_UPDATE_URL: ${CHAMELEON_SHARING_PORTAL_UPDATE_URL}
      # All containers will join this network
      DOCKER_NETWORK_NAME: ${DOCKER_NETWORK_NAME}
      # The container directory that will hold the user's working files
      DOCKER_NOTEBOOK_DIR: /work
      # JupyterHub will spawn this Notebook image for users
      DOCKER_NOTEBOOK_IMAGE: ${JUPYTERHUB_SINGLEUSER_IMAGE}:dev
      # Keystone authentication will happen against this auth URL
      OS_AUTH_URL: https://chi.uc.chameleoncloud.org:5000/v3
      # Default region name
      OS_REGION_NAME: CHI@UC
      # Point to MySQL container
      MYSQL_HOST: hub-db
    env_file:
      - secrets/jupyterhub.env
      - secrets/mysql.env

volumes:
  jupyterhub-data:
  jupyterhub-db-data:

networks:
  default:
    external:
      name: "${DOCKER_NETWORK_NAME}"
